Repository per il progetto di Algoritmi e Strutture Dati


Appunti:
Il processo è di complessità esponenziale:
ogni combinazione delle colonne viene testata, o scartata preventivamente.
Il valore che può assumere una cella è 0 o 1, quindi sono da testare 2^numero colonne combinazioni differenti.
Appurato ciò possiamo conteggiare il numero di cicli al secondo e comparare il tempo di esecuzione previsto.
Se è accettabile (da definire la quantità di tempo accettabile) il processo può continuare, altrimenti viene posta fine alla sua esistenza.
Questa scrematura massiva può funzionare dando in pasto all'eseguibile una cartella contenente i file .matrix
Questo procedimento potrebbe andare bene anche in caso di implementazione di pre elaborazione.
Il numero di cicli al secondo eseguiti dipende dalla dimensione del problema:
più il problema è grande più è possibile il verificarsi di minimum hitting set e di esclusioni, che vanno a popolare una struttura dati.
L'accesso alla struttura dati, per quanto possa avvenire in tempo lineare nei casi migliori,
è comunque proporzionale alla grandezza della struttura dati, nel caso peggiore.


Ordinamento colonne

proposta:
aggiungere std::string* a InputMatrix
al caricamento si crea una matrice bool** più il vettore std::string*
si ordina non in place il vettore std::string* (oppure copia del vettore più ordinamento in place quello che è)
si ottengono due vettori std::string*
mappa std::string -> posizione
si popola la mappa girando una volta un vettore std::string* (va bene sia iniziale che finale)
si ottiene un accesso per stringa da posizione iniziale a finale
si scorre l'altro vettore e si copia la relativa colonna alla posizione i-esima nella posizione segnata dalla mappa
in un'altra matrice bool**

Per stampare infine il risultato se la colonna è scelta al posto di scrivere 1 si scrive il nome i-esimo nel vettore std::string
